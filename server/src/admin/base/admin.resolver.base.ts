/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteAdminArgs } from "./DeleteAdminArgs";
import { AdminFindManyArgs } from "./AdminFindManyArgs";
import { AdminFindUniqueArgs } from "./AdminFindUniqueArgs";
import { Admin } from "./Admin";
import { AdminService } from "../admin.service";

@graphql.Resolver(() => Admin)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AdminResolverBase {
  constructor(
    protected readonly service: AdminService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Admin",
    action: "read",
    possession: "any",
  })
  async _adminsMeta(
    @graphql.Args() args: AdminFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Admin])
  @nestAccessControl.UseRoles({
    resource: "Admin",
    action: "read",
    possession: "any",
  })
  async admins(@graphql.Args() args: AdminFindManyArgs): Promise<Admin[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Admin, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Admin",
    action: "read",
    possession: "own",
  })
  async admin(
    @graphql.Args() args: AdminFindUniqueArgs
  ): Promise<Admin | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Admin)
  @nestAccessControl.UseRoles({
    resource: "Admin",
    action: "delete",
    possession: "any",
  })
  async deleteAdmin(
    @graphql.Args() args: DeleteAdminArgs
  ): Promise<Admin | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
